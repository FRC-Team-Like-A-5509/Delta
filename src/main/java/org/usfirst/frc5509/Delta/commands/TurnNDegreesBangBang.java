// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5509.Delta.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc5509.Delta.MathUtil;
import org.usfirst.frc5509.Delta.Robot;

/**
 *
 */
public class TurnNDegreesBangBang extends Command {
	private final static double degreeDeadband = 5;
	private final static double turnPower = .4;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_degrees;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double desiredDegrees;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public TurnNDegreesBangBang(double degrees) {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_degrees = degrees;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	@Override
	protected void initialize() {
		desiredDegrees = Robot.driveTrain.getAngle() + m_degrees;
		desiredDegrees %= 360;
		if(desiredDegrees < 0) {
			desiredDegrees += 360;
		}
	}

	// Called repeatedly when this Command is scheduled to run
	@Override
	protected void execute() {
		
		double currentAngle = Robot.driveTrain.getAngle();
		double direction = MathUtil.calcDirection(currentAngle, desiredDegrees);
		if(direction > 0) {
			Robot.driveTrain.turn(turnPower);
		}
		else {
			Robot.driveTrain.turn(-turnPower);
		}
		
	}

	// Make this return true when this Command no longer needs to run execute()
	@Override
	protected boolean isFinished() {

		double currentAngle = Robot.driveTrain.getAngle();
		return (Math.abs(currentAngle - desiredDegrees) <= degreeDeadband);
			
		
	
	}

	// Called once after isFinished returns true
	@Override
	protected void end() {
		Robot.driveTrain.stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	@Override
	protected void interrupted() {
		end();
	}
}
