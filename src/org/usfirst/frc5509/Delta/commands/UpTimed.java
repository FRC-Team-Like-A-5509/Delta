// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5509.Delta.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5509.Delta.Robot;
import org.usfirst.frc5509.Delta.subsystems.LiftDrive;

/**
 *
 */
public class UpTimed extends Command {

	//private double fast;
	private double speed;
	private double secondsPerInches;
	//private double powerToLift;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_distanceInInches;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public UpTimed(double distanceInInches) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_distanceInInches = distanceInInches;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.liftDrive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
		secondsPerInches = SmartDashboard.getNumber(LiftDrive.AUTONOMOUS_LIFT_SECONDSPERINCHES_KEY, LiftDrive.AUTONOMOUS_LIFT_SECONDSPERINCHES_DEFAULT);
		speed = SmartDashboard.getNumber(LiftDrive.AUTONOMOUS_LIFT_SPEED_KEY, LiftDrive.AUTONOMOUS_LIFT_SPEED_DEFAULT);
		//secondsPerInches = .50 / fast;
		//powerToLift = speed;
		this.setTimeout(secondsPerInches * Math.abs(m_distanceInInches));
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	Robot.liftDrive.run(speed * Math.signum(m_distanceInInches));
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return this.isTimedOut();
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.liftDrive.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
